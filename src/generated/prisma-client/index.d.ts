// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  externalGroupInvitation: (
    where?: ExternalGroupInvitationWhereInput
  ) => Promise<boolean>;
  groupInvitation: (where?: GroupInvitationWhereInput) => Promise<boolean>;
  moderation: (where?: ModerationWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  thread: (where?: ThreadWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  externalGroupInvitation: (
    where: ExternalGroupInvitationWhereUniqueInput
  ) => ExternalGroupInvitationNullablePromise;
  externalGroupInvitations: (args?: {
    where?: ExternalGroupInvitationWhereInput;
    orderBy?: ExternalGroupInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ExternalGroupInvitation>;
  externalGroupInvitationsConnection: (args?: {
    where?: ExternalGroupInvitationWhereInput;
    orderBy?: ExternalGroupInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExternalGroupInvitationConnectionPromise;
  groupInvitation: (
    where: GroupInvitationWhereUniqueInput
  ) => GroupInvitationNullablePromise;
  groupInvitations: (args?: {
    where?: GroupInvitationWhereInput;
    orderBy?: GroupInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroupInvitation>;
  groupInvitationsConnection: (args?: {
    where?: GroupInvitationWhereInput;
    orderBy?: GroupInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupInvitationConnectionPromise;
  moderation: (where: ModerationWhereUniqueInput) => ModerationNullablePromise;
  moderations: (args?: {
    where?: ModerationWhereInput;
    orderBy?: ModerationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Moderation>;
  moderationsConnection: (args?: {
    where?: ModerationWhereInput;
    orderBy?: ModerationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ModerationConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  thread: (where: ThreadWhereUniqueInput) => ThreadNullablePromise;
  threads: (args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Thread>;
  threadsConnection: (args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ThreadConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createExternalGroupInvitation: (
    data: ExternalGroupInvitationCreateInput
  ) => ExternalGroupInvitationPromise;
  updateExternalGroupInvitation: (args: {
    data: ExternalGroupInvitationUpdateInput;
    where: ExternalGroupInvitationWhereUniqueInput;
  }) => ExternalGroupInvitationPromise;
  updateManyExternalGroupInvitations: (args: {
    data: ExternalGroupInvitationUpdateManyMutationInput;
    where?: ExternalGroupInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertExternalGroupInvitation: (args: {
    where: ExternalGroupInvitationWhereUniqueInput;
    create: ExternalGroupInvitationCreateInput;
    update: ExternalGroupInvitationUpdateInput;
  }) => ExternalGroupInvitationPromise;
  deleteExternalGroupInvitation: (
    where: ExternalGroupInvitationWhereUniqueInput
  ) => ExternalGroupInvitationPromise;
  deleteManyExternalGroupInvitations: (
    where?: ExternalGroupInvitationWhereInput
  ) => BatchPayloadPromise;
  createGroupInvitation: (
    data: GroupInvitationCreateInput
  ) => GroupInvitationPromise;
  updateGroupInvitation: (args: {
    data: GroupInvitationUpdateInput;
    where: GroupInvitationWhereUniqueInput;
  }) => GroupInvitationPromise;
  updateManyGroupInvitations: (args: {
    data: GroupInvitationUpdateManyMutationInput;
    where?: GroupInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertGroupInvitation: (args: {
    where: GroupInvitationWhereUniqueInput;
    create: GroupInvitationCreateInput;
    update: GroupInvitationUpdateInput;
  }) => GroupInvitationPromise;
  deleteGroupInvitation: (
    where: GroupInvitationWhereUniqueInput
  ) => GroupInvitationPromise;
  deleteManyGroupInvitations: (
    where?: GroupInvitationWhereInput
  ) => BatchPayloadPromise;
  createModeration: (data: ModerationCreateInput) => ModerationPromise;
  updateModeration: (args: {
    data: ModerationUpdateInput;
    where: ModerationWhereUniqueInput;
  }) => ModerationPromise;
  updateManyModerations: (args: {
    data: ModerationUpdateManyMutationInput;
    where?: ModerationWhereInput;
  }) => BatchPayloadPromise;
  upsertModeration: (args: {
    where: ModerationWhereUniqueInput;
    create: ModerationCreateInput;
    update: ModerationUpdateInput;
  }) => ModerationPromise;
  deleteModeration: (where: ModerationWhereUniqueInput) => ModerationPromise;
  deleteManyModerations: (where?: ModerationWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createThread: (data: ThreadCreateInput) => ThreadPromise;
  updateThread: (args: {
    data: ThreadUpdateInput;
    where: ThreadWhereUniqueInput;
  }) => ThreadPromise;
  updateManyThreads: (args: {
    data: ThreadUpdateManyMutationInput;
    where?: ThreadWhereInput;
  }) => BatchPayloadPromise;
  upsertThread: (args: {
    where: ThreadWhereUniqueInput;
    create: ThreadCreateInput;
    update: ThreadUpdateInput;
  }) => ThreadPromise;
  deleteThread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  deleteManyThreads: (where?: ThreadWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  externalGroupInvitation: (
    where?: ExternalGroupInvitationSubscriptionWhereInput
  ) => ExternalGroupInvitationSubscriptionPayloadSubscription;
  groupInvitation: (
    where?: GroupInvitationSubscriptionWhereInput
  ) => GroupInvitationSubscriptionPayloadSubscription;
  moderation: (
    where?: ModerationSubscriptionWhereInput
  ) => ModerationSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  thread: (
    where?: ThreadSubscriptionWhereInput
  ) => ThreadSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "accepted_ASC"
  | "accepted_DESC"
  | "email_ASC"
  | "email_DESC"
  | "groupId_ASC"
  | "groupId_DESC"
  | "inviterUserId_ASC"
  | "inviterUserId_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ModerationStatus =
  | "TRIGGERED_CONTENT_FILTER"
  | "APPROVED_BY_MODERATOR";

export type ExternalGroupInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "groupId_ASC"
  | "groupId_DESC";

export type ModerationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "content_ASC"
  | "content_DESC";

export type ThreadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "groupId_ASC"
  | "groupId_DESC"
  | "title_ASC"
  | "title_DESC";

export interface ThreadCreateInput {
  id?: Maybe<ID_Input>;
  groupId: String;
  moderation?: Maybe<ModerationCreateOneInput>;
  posts?: Maybe<PostCreateManyWithoutThreadInput>;
  title: String;
}

export interface ThreadCreateOneWithoutPostsInput {
  create?: Maybe<ThreadCreateWithoutPostsInput>;
  connect?: Maybe<ThreadWhereUniqueInput>;
}

export interface ModerationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ModerationWhereInput>;
  AND?: Maybe<
    ModerationSubscriptionWhereInput[] | ModerationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ModerationSubscriptionWhereInput[] | ModerationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ModerationSubscriptionWhereInput[] | ModerationSubscriptionWhereInput
  >;
}

export type ExternalGroupInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ThreadUpsertWithoutPostsInput {
  update: ThreadUpdateWithoutPostsDataInput;
  create: ThreadCreateWithoutPostsInput;
}

export interface ThreadUpdateManyMutationInput {
  groupId?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ThreadUpdateWithoutPostsDataInput {
  groupId?: Maybe<String>;
  moderation?: Maybe<ModerationUpdateOneInput>;
  title?: Maybe<String>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface ThreadUpdateOneWithoutPostsInput {
  create?: Maybe<ThreadCreateWithoutPostsInput>;
  update?: Maybe<ThreadUpdateWithoutPostsDataInput>;
  upsert?: Maybe<ThreadUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ThreadWhereUniqueInput>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export type ThreadWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ExternalGroupInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExternalGroupInvitationWhereInput>;
  AND?: Maybe<
    | ExternalGroupInvitationSubscriptionWhereInput[]
    | ExternalGroupInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ExternalGroupInvitationSubscriptionWhereInput[]
    | ExternalGroupInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ExternalGroupInvitationSubscriptionWhereInput[]
    | ExternalGroupInvitationSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostUpdateWithoutThreadDataInput {
  content?: Maybe<String>;
  moderation?: Maybe<ModerationUpdateOneInput>;
}

export interface ModerationUpsertNestedInput {
  update: ModerationUpdateDataInput;
  create: ModerationCreateInput;
}

export type ModerationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ModerationUpdateDataInput {
  status?: Maybe<ModerationStatus>;
}

export interface GroupInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupInvitationWhereInput>;
  AND?: Maybe<
    | GroupInvitationSubscriptionWhereInput[]
    | GroupInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | GroupInvitationSubscriptionWhereInput[]
    | GroupInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | GroupInvitationSubscriptionWhereInput[]
    | GroupInvitationSubscriptionWhereInput
  >;
}

export interface ModerationUpdateOneInput {
  create?: Maybe<ModerationCreateInput>;
  update?: Maybe<ModerationUpdateDataInput>;
  upsert?: Maybe<ModerationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ModerationWhereUniqueInput>;
}

export interface ExternalGroupInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  groupId?: Maybe<String>;
  groupId_not?: Maybe<String>;
  groupId_in?: Maybe<String[] | String>;
  groupId_not_in?: Maybe<String[] | String>;
  groupId_lt?: Maybe<String>;
  groupId_lte?: Maybe<String>;
  groupId_gt?: Maybe<String>;
  groupId_gte?: Maybe<String>;
  groupId_contains?: Maybe<String>;
  groupId_not_contains?: Maybe<String>;
  groupId_starts_with?: Maybe<String>;
  groupId_not_starts_with?: Maybe<String>;
  groupId_ends_with?: Maybe<String>;
  groupId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ExternalGroupInvitationWhereInput[] | ExternalGroupInvitationWhereInput
  >;
  OR?: Maybe<
    ExternalGroupInvitationWhereInput[] | ExternalGroupInvitationWhereInput
  >;
  NOT?: Maybe<
    ExternalGroupInvitationWhereInput[] | ExternalGroupInvitationWhereInput
  >;
}

export interface PostCreateWithoutThreadInput {
  id?: Maybe<ID_Input>;
  content: String;
  moderation?: Maybe<ModerationCreateOneInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ExternalGroupInvitationCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  groupId: String;
}

export interface PostUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface ExternalGroupInvitationUpdateInput {
  email?: Maybe<String>;
  groupId?: Maybe<String>;
}

export interface ThreadWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  groupId?: Maybe<String>;
  groupId_not?: Maybe<String>;
  groupId_in?: Maybe<String[] | String>;
  groupId_not_in?: Maybe<String[] | String>;
  groupId_lt?: Maybe<String>;
  groupId_lte?: Maybe<String>;
  groupId_gt?: Maybe<String>;
  groupId_gte?: Maybe<String>;
  groupId_contains?: Maybe<String>;
  groupId_not_contains?: Maybe<String>;
  groupId_starts_with?: Maybe<String>;
  groupId_not_starts_with?: Maybe<String>;
  groupId_ends_with?: Maybe<String>;
  groupId_not_ends_with?: Maybe<String>;
  moderation?: Maybe<ModerationWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ThreadWhereInput[] | ThreadWhereInput>;
  OR?: Maybe<ThreadWhereInput[] | ThreadWhereInput>;
  NOT?: Maybe<ThreadWhereInput[] | ThreadWhereInput>;
}

export interface ExternalGroupInvitationUpdateManyMutationInput {
  email?: Maybe<String>;
  groupId?: Maybe<String>;
}

export type GroupInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateInput {
  content?: Maybe<String>;
  moderation?: Maybe<ModerationUpdateOneInput>;
  thread?: Maybe<ThreadUpdateOneWithoutPostsInput>;
}

export interface PostUpsertWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutThreadDataInput;
  create: PostCreateWithoutThreadInput;
}

export interface ThreadCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  groupId: String;
  moderation?: Maybe<ModerationCreateOneInput>;
  title: String;
}

export interface PostUpdateManyWithoutThreadInput {
  create?: Maybe<PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutThreadInput[]
    | PostUpdateWithWhereUniqueWithoutThreadInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutThreadInput[]
    | PostUpsertWithWhereUniqueWithoutThreadInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface GroupInvitationCreateInput {
  id?: Maybe<ID_Input>;
  accepted: Boolean;
  email: String;
  groupId: String;
  inviterUserId: String;
  userId?: Maybe<String>;
}

export interface ThreadUpdateInput {
  groupId?: Maybe<String>;
  moderation?: Maybe<ModerationUpdateOneInput>;
  posts?: Maybe<PostUpdateManyWithoutThreadInput>;
  title?: Maybe<String>;
}

export interface GroupInvitationUpdateInput {
  accepted?: Maybe<Boolean>;
  email?: Maybe<String>;
  groupId?: Maybe<String>;
  inviterUserId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ThreadSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ThreadWhereInput>;
  AND?: Maybe<ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput>;
  OR?: Maybe<ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput>;
  NOT?: Maybe<ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput>;
}

export interface GroupInvitationUpdateManyMutationInput {
  accepted?: Maybe<Boolean>;
  email?: Maybe<String>;
  groupId?: Maybe<String>;
  inviterUserId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface PostUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface ModerationCreateInput {
  id?: Maybe<ID_Input>;
  status: ModerationStatus;
}

export interface PostUpdateWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutThreadDataInput;
}

export interface ModerationCreateOneInput {
  create?: Maybe<ModerationCreateInput>;
  connect?: Maybe<ModerationWhereUniqueInput>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  moderation?: Maybe<ModerationCreateOneInput>;
  thread?: Maybe<ThreadCreateOneWithoutPostsInput>;
}

export interface ModerationUpdateManyMutationInput {
  status?: Maybe<ModerationStatus>;
}

export interface ModerationUpdateInput {
  status?: Maybe<ModerationStatus>;
}

export interface ModerationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<ModerationStatus>;
  status_not?: Maybe<ModerationStatus>;
  status_in?: Maybe<ModerationStatus[] | ModerationStatus>;
  status_not_in?: Maybe<ModerationStatus[] | ModerationStatus>;
  AND?: Maybe<ModerationWhereInput[] | ModerationWhereInput>;
  OR?: Maybe<ModerationWhereInput[] | ModerationWhereInput>;
  NOT?: Maybe<ModerationWhereInput[] | ModerationWhereInput>;
}

export interface GroupInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  accepted?: Maybe<Boolean>;
  accepted_not?: Maybe<Boolean>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  groupId?: Maybe<String>;
  groupId_not?: Maybe<String>;
  groupId_in?: Maybe<String[] | String>;
  groupId_not_in?: Maybe<String[] | String>;
  groupId_lt?: Maybe<String>;
  groupId_lte?: Maybe<String>;
  groupId_gt?: Maybe<String>;
  groupId_gte?: Maybe<String>;
  groupId_contains?: Maybe<String>;
  groupId_not_contains?: Maybe<String>;
  groupId_starts_with?: Maybe<String>;
  groupId_not_starts_with?: Maybe<String>;
  groupId_ends_with?: Maybe<String>;
  groupId_not_ends_with?: Maybe<String>;
  inviterUserId?: Maybe<String>;
  inviterUserId_not?: Maybe<String>;
  inviterUserId_in?: Maybe<String[] | String>;
  inviterUserId_not_in?: Maybe<String[] | String>;
  inviterUserId_lt?: Maybe<String>;
  inviterUserId_lte?: Maybe<String>;
  inviterUserId_gt?: Maybe<String>;
  inviterUserId_gte?: Maybe<String>;
  inviterUserId_contains?: Maybe<String>;
  inviterUserId_not_contains?: Maybe<String>;
  inviterUserId_starts_with?: Maybe<String>;
  inviterUserId_not_starts_with?: Maybe<String>;
  inviterUserId_ends_with?: Maybe<String>;
  inviterUserId_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupInvitationWhereInput[] | GroupInvitationWhereInput>;
  OR?: Maybe<GroupInvitationWhereInput[] | GroupInvitationWhereInput>;
  NOT?: Maybe<GroupInvitationWhereInput[] | GroupInvitationWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  moderation?: Maybe<ModerationWhereInput>;
  thread?: Maybe<ThreadWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface PostCreateManyWithoutThreadInput {
  create?: Maybe<PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ThreadPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  groupId: String;
  title: String;
}

export interface ThreadPreviousValuesPromise
  extends Promise<ThreadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  groupId: () => Promise<String>;
  title: () => Promise<String>;
}

export interface ThreadPreviousValuesSubscription
  extends Promise<AsyncIterator<ThreadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  groupId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface GroupInvitationConnection {
  pageInfo: PageInfo;
  edges: GroupInvitationEdge[];
}

export interface GroupInvitationConnectionPromise
  extends Promise<GroupInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupInvitationEdge>>() => T;
  aggregate: <T = AggregateGroupInvitationPromise>() => T;
}

export interface GroupInvitationConnectionSubscription
  extends Promise<AsyncIterator<GroupInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupInvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupInvitationSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface GroupInvitation {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  accepted: Boolean;
  email: String;
  groupId: String;
  inviterUserId: String;
  userId?: String;
}

export interface GroupInvitationPromise
  extends Promise<GroupInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  accepted: () => Promise<Boolean>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
  inviterUserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface GroupInvitationSubscription
  extends Promise<AsyncIterator<GroupInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  groupId: () => Promise<AsyncIterator<String>>;
  inviterUserId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface GroupInvitationNullablePromise
  extends Promise<GroupInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  accepted: () => Promise<Boolean>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
  inviterUserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface AggregateExternalGroupInvitation {
  count: Int;
}

export interface AggregateExternalGroupInvitationPromise
  extends Promise<AggregateExternalGroupInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExternalGroupInvitationSubscription
  extends Promise<AsyncIterator<AggregateExternalGroupInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ThreadEdge {
  node: Thread;
  cursor: String;
}

export interface ThreadEdgePromise extends Promise<ThreadEdge>, Fragmentable {
  node: <T = ThreadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThreadEdgeSubscription
  extends Promise<AsyncIterator<ThreadEdge>>,
    Fragmentable {
  node: <T = ThreadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ExternalGroupInvitationEdge {
  node: ExternalGroupInvitation;
  cursor: String;
}

export interface ExternalGroupInvitationEdgePromise
  extends Promise<ExternalGroupInvitationEdge>,
    Fragmentable {
  node: <T = ExternalGroupInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExternalGroupInvitationEdgeSubscription
  extends Promise<AsyncIterator<ExternalGroupInvitationEdge>>,
    Fragmentable {
  node: <T = ExternalGroupInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThreadSubscriptionPayload {
  mutation: MutationType;
  node: Thread;
  updatedFields: String[];
  previousValues: ThreadPreviousValues;
}

export interface ThreadSubscriptionPayloadPromise
  extends Promise<ThreadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThreadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThreadPreviousValuesPromise>() => T;
}

export interface ThreadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThreadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThreadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThreadPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  moderation: <T = ModerationPromise>() => T;
  thread: <T = ThreadPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  moderation: <T = ModerationSubscription>() => T;
  thread: <T = ThreadSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  moderation: <T = ModerationPromise>() => T;
  thread: <T = ThreadPromise>() => T;
}

export interface ExternalGroupInvitationConnection {
  pageInfo: PageInfo;
  edges: ExternalGroupInvitationEdge[];
}

export interface ExternalGroupInvitationConnectionPromise
  extends Promise<ExternalGroupInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExternalGroupInvitationEdge>>() => T;
  aggregate: <T = AggregateExternalGroupInvitationPromise>() => T;
}

export interface ExternalGroupInvitationConnectionSubscription
  extends Promise<AsyncIterator<ExternalGroupInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ExternalGroupInvitationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateExternalGroupInvitationSubscription>() => T;
}

export interface ModerationEdge {
  node: Moderation;
  cursor: String;
}

export interface ModerationEdgePromise
  extends Promise<ModerationEdge>,
    Fragmentable {
  node: <T = ModerationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ModerationEdgeSubscription
  extends Promise<AsyncIterator<ModerationEdge>>,
    Fragmentable {
  node: <T = ModerationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ExternalGroupInvitationSubscriptionPayload {
  mutation: MutationType;
  node: ExternalGroupInvitation;
  updatedFields: String[];
  previousValues: ExternalGroupInvitationPreviousValues;
}

export interface ExternalGroupInvitationSubscriptionPayloadPromise
  extends Promise<ExternalGroupInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExternalGroupInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExternalGroupInvitationPreviousValuesPromise>() => T;
}

export interface ExternalGroupInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExternalGroupInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExternalGroupInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ExternalGroupInvitationPreviousValuesSubscription
  >() => T;
}

export interface Moderation {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: ModerationStatus;
}

export interface ModerationPromise extends Promise<Moderation>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<ModerationStatus>;
}

export interface ModerationSubscription
  extends Promise<AsyncIterator<Moderation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ModerationStatus>>;
}

export interface ModerationNullablePromise
  extends Promise<Moderation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<ModerationStatus>;
}

export interface ExternalGroupInvitationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  groupId: String;
}

export interface ExternalGroupInvitationPreviousValuesPromise
  extends Promise<ExternalGroupInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
}

export interface ExternalGroupInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<ExternalGroupInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  groupId: () => Promise<AsyncIterator<String>>;
}

export interface GroupInvitationEdge {
  node: GroupInvitation;
  cursor: String;
}

export interface GroupInvitationEdgePromise
  extends Promise<GroupInvitationEdge>,
    Fragmentable {
  node: <T = GroupInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupInvitationEdgeSubscription
  extends Promise<AsyncIterator<GroupInvitationEdge>>,
    Fragmentable {
  node: <T = GroupInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ExternalGroupInvitation {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  groupId: String;
}

export interface ExternalGroupInvitationPromise
  extends Promise<ExternalGroupInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
}

export interface ExternalGroupInvitationSubscription
  extends Promise<AsyncIterator<ExternalGroupInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  groupId: () => Promise<AsyncIterator<String>>;
}

export interface ExternalGroupInvitationNullablePromise
  extends Promise<ExternalGroupInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
}

export interface ThreadConnection {
  pageInfo: PageInfo;
  edges: ThreadEdge[];
}

export interface ThreadConnectionPromise
  extends Promise<ThreadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThreadEdge>>() => T;
  aggregate: <T = AggregateThreadPromise>() => T;
}

export interface ThreadConnectionSubscription
  extends Promise<AsyncIterator<ThreadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThreadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThreadSubscription>() => T;
}

export interface GroupInvitationSubscriptionPayload {
  mutation: MutationType;
  node: GroupInvitation;
  updatedFields: String[];
  previousValues: GroupInvitationPreviousValues;
}

export interface GroupInvitationSubscriptionPayloadPromise
  extends Promise<GroupInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupInvitationPreviousValuesPromise>() => T;
}

export interface GroupInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupInvitationPreviousValuesSubscription>() => T;
}

export interface Thread {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  groupId: String;
  title: String;
}

export interface ThreadPromise extends Promise<Thread>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  groupId: () => Promise<String>;
  moderation: <T = ModerationPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
}

export interface ThreadSubscription
  extends Promise<AsyncIterator<Thread>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  groupId: () => Promise<AsyncIterator<String>>;
  moderation: <T = ModerationSubscription>() => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ThreadNullablePromise
  extends Promise<Thread | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  groupId: () => Promise<String>;
  moderation: <T = ModerationPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
}

export interface ModerationConnection {
  pageInfo: PageInfo;
  edges: ModerationEdge[];
}

export interface ModerationConnectionPromise
  extends Promise<ModerationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ModerationEdge>>() => T;
  aggregate: <T = AggregateModerationPromise>() => T;
}

export interface ModerationConnectionSubscription
  extends Promise<AsyncIterator<ModerationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ModerationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateModerationSubscription>() => T;
}

export interface ModerationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: ModerationStatus;
}

export interface ModerationPreviousValuesPromise
  extends Promise<ModerationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<ModerationStatus>;
}

export interface ModerationPreviousValuesSubscription
  extends Promise<AsyncIterator<ModerationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ModerationStatus>>;
}

export interface ModerationSubscriptionPayload {
  mutation: MutationType;
  node: Moderation;
  updatedFields: String[];
  previousValues: ModerationPreviousValues;
}

export interface ModerationSubscriptionPayloadPromise
  extends Promise<ModerationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ModerationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ModerationPreviousValuesPromise>() => T;
}

export interface ModerationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ModerationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ModerationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ModerationPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface GroupInvitationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  accepted: Boolean;
  email: String;
  groupId: String;
  inviterUserId: String;
  userId?: String;
}

export interface GroupInvitationPreviousValuesPromise
  extends Promise<GroupInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  accepted: () => Promise<Boolean>;
  email: () => Promise<String>;
  groupId: () => Promise<String>;
  inviterUserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface GroupInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  groupId: () => Promise<AsyncIterator<String>>;
  inviterUserId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroupInvitation {
  count: Int;
}

export interface AggregateGroupInvitationPromise
  extends Promise<AggregateGroupInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupInvitationSubscription
  extends Promise<AsyncIterator<AggregateGroupInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateModeration {
  count: Int;
}

export interface AggregateModerationPromise
  extends Promise<AggregateModeration>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateModerationSubscription
  extends Promise<AsyncIterator<AggregateModeration>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateThread {
  count: Int;
}

export interface AggregateThreadPromise
  extends Promise<AggregateThread>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThreadSubscription
  extends Promise<AsyncIterator<AggregateThread>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ExternalGroupInvitation",
    embedded: false
  },
  {
    name: "GroupInvitation",
    embedded: false
  },
  {
    name: "ModerationStatus",
    embedded: false
  },
  {
    name: "Moderation",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Thread",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
