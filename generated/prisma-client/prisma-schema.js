module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregatePrompt {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createPrompt(data: PromptCreateInput!): Prompt!
  updatePrompt(data: PromptUpdateInput!, where: PromptWhereUniqueInput!): Prompt
  updateManyPrompts(data: PromptUpdateManyMutationInput!, where: PromptWhereInput): BatchPayload!
  upsertPrompt(where: PromptWhereUniqueInput!, create: PromptCreateInput!, update: PromptUpdateInput!): Prompt!
  deletePrompt(where: PromptWhereUniqueInput!): Prompt
  deleteManyPrompts(where: PromptWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
  prompt: Prompt
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  published: Boolean
  prompt: PromptCreateOneWithoutPostsInput
}

input PostCreateManyWithoutPromptInput {
  create: [PostCreateWithoutPromptInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutPromptInput {
  id: ID
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  prompt: PromptUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutPromptInput {
  create: [PostCreateWithoutPromptInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPromptInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPromptInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutPromptDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutPromptInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPromptDataInput!
}

input PostUpsertWithWhereUniqueWithoutPromptInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPromptDataInput!
  create: PostCreateWithoutPromptInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  prompt: PromptWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Prompt {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
  authorId: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type PromptConnection {
  pageInfo: PageInfo!
  edges: [PromptEdge]!
  aggregate: AggregatePrompt!
}

input PromptCreateInput {
  id: ID
  title: String!
  published: Boolean
  authorId: String
  posts: PostCreateManyWithoutPromptInput
}

input PromptCreateOneWithoutPostsInput {
  create: PromptCreateWithoutPostsInput
  connect: PromptWhereUniqueInput
}

input PromptCreateWithoutPostsInput {
  id: ID
  title: String!
  published: Boolean
  authorId: String
}

type PromptEdge {
  node: Prompt!
  cursor: String!
}

enum PromptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
  authorId_ASC
  authorId_DESC
}

type PromptPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
  authorId: String
}

type PromptSubscriptionPayload {
  mutation: MutationType!
  node: Prompt
  updatedFields: [String!]
  previousValues: PromptPreviousValues
}

input PromptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PromptWhereInput
  AND: [PromptSubscriptionWhereInput!]
  OR: [PromptSubscriptionWhereInput!]
  NOT: [PromptSubscriptionWhereInput!]
}

input PromptUpdateInput {
  title: String
  published: Boolean
  authorId: String
  posts: PostUpdateManyWithoutPromptInput
}

input PromptUpdateManyMutationInput {
  title: String
  published: Boolean
  authorId: String
}

input PromptUpdateOneWithoutPostsInput {
  create: PromptCreateWithoutPostsInput
  update: PromptUpdateWithoutPostsDataInput
  upsert: PromptUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: PromptWhereUniqueInput
}

input PromptUpdateWithoutPostsDataInput {
  title: String
  published: Boolean
  authorId: String
}

input PromptUpsertWithoutPostsInput {
  update: PromptUpdateWithoutPostsDataInput!
  create: PromptCreateWithoutPostsInput!
}

input PromptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  authorId: String
  authorId_not: String
  authorId_in: [String!]
  authorId_not_in: [String!]
  authorId_lt: String
  authorId_lte: String
  authorId_gt: String
  authorId_gte: String
  authorId_contains: String
  authorId_not_contains: String
  authorId_starts_with: String
  authorId_not_starts_with: String
  authorId_ends_with: String
  authorId_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [PromptWhereInput!]
  OR: [PromptWhereInput!]
  NOT: [PromptWhereInput!]
}

input PromptWhereUniqueInput {
  id: ID
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  prompt(where: PromptWhereUniqueInput!): Prompt
  prompts(where: PromptWhereInput, orderBy: PromptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prompt]!
  promptsConnection(where: PromptWhereInput, orderBy: PromptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PromptConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  prompt(where: PromptSubscriptionWhereInput): PromptSubscriptionPayload
}
`
      }
    